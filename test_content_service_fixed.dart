#!/usr/bin/env dart
/*
Script de test pour v√©rifier si ContentService.buildTextFromRefs() 
fonctionne correctement apr√®s la correction.
*/

import 'dart:convert';
import 'dart:io';

void main() async {
  print('üîß Test de ContentService corrig√©');
  print('=' * 50);

  // Tester la nouvelle fonction simplifi√©e
  await testSimplifiedBuildTextFromRefs();
}

Future<void> testSimplifiedBuildTextFromRefs() async {
  try {
    // Charger le corpus
    final file =
        File('/Users/mac/Documents/Projet_sprit/assets/corpus/quran_full.json');
    final jsonString = await file.readAsString();
    final List<dynamic> data = jsonDecode(jsonString);

    // Simuler la recherche de versets pour la sourate 112 (Al-Ikhlas)
    final verses = data
        .where((v) => v['surah'] == 112 && v['ayah'] >= 1 && v['ayah'] <= 4)
        .toList();

    print('üìñ Versets trouv√©s pour sourate 112: ${verses.length}');

    // Simuler notre logique simplifi√©e
    final buffer = StringBuffer();
    const locale = 'ar';

    for (final v in verses) {
      final line = v['textAr'] ?? '';
      if (line.isEmpty) continue;

      String processedLine = line.trim();

      // Appliquer notre logique simplifi√©e de traitement de Basmalah
      if (locale == 'ar') {
        processedLine = processBismillahInVerse(processedLine);
      }

      // Ajouter le texte trait√©
      buffer.write(processedLine);

      // Ajouter le marqueur de num√©ro √† la fin
      buffer.write(' {{V:${v['ayah']}}}');
      buffer.writeln();
    }

    final result = buffer.toString().trim();
    print('\nüìÑ R√©sultat final:');
    print('-' * 40);
    print(result);
    print('-' * 40);

    // V√©rifications
    if (result.contains('ÿ®Ÿêÿ≥ŸíŸÖŸê Ÿ±ŸÑŸÑŸéŸëŸáŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸíŸÖŸéŸ∞ŸÜŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸêŸäŸÖŸê')) {
      print('‚úÖ Basmalah pr√©sente');
    } else {
      print('‚ùå Basmalah manquante');
    }

    if (result.contains('{{V:1}}') && result.contains('{{V:2}}')) {
      print('‚úÖ Marqueurs de versets pr√©sents');
    } else {
      print('‚ùå Marqueurs de versets manquants');
    }

    if (result.contains(
        'ÿ®Ÿêÿ≥ŸíŸÖŸê Ÿ±ŸÑŸÑŸéŸëŸáŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸíŸÖŸéŸ∞ŸÜŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸêŸäŸÖŸê\n\nŸÇŸèŸÑŸí ŸáŸèŸàŸé Ÿ±ŸÑŸÑŸéŸëŸáŸè ÿ£Ÿéÿ≠ŸéÿØŸå')) {
      print('‚úÖ SUCCESS: Basmalah correctement s√©par√©e !');
    } else if (result.contains('ÿ®Ÿêÿ≥ŸíŸÖŸê Ÿ±ŸÑŸÑŸéŸëŸáŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸíŸÖŸéŸ∞ŸÜŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸêŸäŸÖŸê') &&
        result.contains('ŸÇŸèŸÑŸí ŸáŸèŸàŸé Ÿ±ŸÑŸÑŸéŸëŸáŸè ÿ£Ÿéÿ≠ŸéÿØŸå')) {
      print(
          '‚ö†Ô∏è Basmalah et verset pr√©sents mais peut-√™tre pas parfaitement s√©par√©s');
    } else {
      print('‚ùå PROBLEM: Format inattendu');
    }

    print(
        '\nüß™ Test termin√© avec succ√®s - Le service devrait maintenant fonctionner!');
  } catch (e) {
    print('‚ùå Erreur: $e');
  }
}

/// Version simplifi√©e de la logique de traitement de Basmalah
String processBismillahInVerse(String verse) {
  try {
    const bismillah = 'ÿ®Ÿêÿ≥ŸíŸÖŸê Ÿ±ŸÑŸÑŸéŸëŸáŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸíŸÖŸéŸ∞ŸÜŸê Ÿ±ŸÑÿ±ŸéŸëÿ≠ŸêŸäŸÖŸê';

    // Cas 1: Le verset contient d√©j√† un \n (nouveau format)
    if (verse.contains('\n')) {
      final parts = verse.split('\n');
      final firstPart = parts[0].trim();

      if (firstPart == bismillah) {
        final restParts =
            parts.skip(1).where((p) => p.trim().isNotEmpty).toList();
        if (restParts.isNotEmpty) {
          return '$bismillah\n\n${restParts.join(' ')}';
        } else {
          return bismillah;
        }
      }
    }

    // Cas 2: Format traditionnel - Basmalah au d√©but
    if (verse.startsWith(bismillah)) {
      final rest = verse.substring(bismillah.length).trim();
      if (rest.isNotEmpty) {
        return '$bismillah\n\n$rest';
      } else {
        return bismillah;
      }
    }

    // Cas 3: Aucune Basmalah d√©tect√©e, retourner tel quel
    return verse;
  } catch (e) {
    print('‚ö†Ô∏è Erreur lors du traitement de la Basmalah: $e');
    return verse;
  }
}

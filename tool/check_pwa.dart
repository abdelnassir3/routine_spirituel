#!/usr/bin/env dart

import 'dart:io';
import 'dart:convert';

/// PWA Configuration Checker for RISAQ
/// Validates that all PWA requirements are met
void main() async {
  print('üîç Checking PWA Configuration for RISAQ...\n');

  var score = 0;
  var maxScore = 0;

  // Check index.html
  print('üìÑ Checking index.html...');
  final indexFile = File('web/index.html');
  if (await indexFile.exists()) {
    final content = await indexFile.readAsString();

    // Check viewport meta tag
    maxScore++;
    if (content.contains('viewport')) {
      print('  ‚úÖ Viewport meta tag found');
      score++;
    } else {
      print('  ‚ùå Missing viewport meta tag');
    }

    // Check theme-color meta tag
    maxScore++;
    if (content.contains('theme-color')) {
      print('  ‚úÖ Theme-color meta tag found');
      score++;
    } else {
      print('  ‚ùå Missing theme-color meta tag');
    }

    // Check apple-mobile-web-app-capable
    maxScore++;
    if (content.contains('apple-mobile-web-app-capable')) {
      print('  ‚úÖ iOS web app capable meta tag found');
      score++;
    } else {
      print('  ‚ùå Missing iOS web app capable meta tag');
    }

    // Check manifest link
    maxScore++;
    if (content.contains('<link rel="manifest"')) {
      print('  ‚úÖ Manifest link found');
      score++;
    } else {
      print('  ‚ùå Missing manifest link');
    }

    // Check service worker registration
    maxScore++;
    if (content.contains('serviceWorker')) {
      print('  ‚úÖ Service worker registration found');
      score++;
    } else {
      print('  ‚ùå Missing service worker registration');
    }

    // Check custom loading screen
    maxScore++;
    if (content.contains('loading-screen')) {
      print('  ‚úÖ Custom loading screen found');
      score++;
    } else {
      print('  ‚ùå Missing custom loading screen');
    }
  } else {
    print('  ‚ùå index.html not found');
  }

  print('\nüìã Checking manifest.json...');
  final manifestFile = File('web/manifest.json');
  if (await manifestFile.exists()) {
    try {
      final content = await manifestFile.readAsString();
      final manifest = jsonDecode(content) as Map<String, dynamic>;

      // Check required fields
      final requiredFields = [
        'name',
        'short_name',
        'start_url',
        'display',
        'background_color',
        'theme_color',
        'icons',
      ];

      for (final field in requiredFields) {
        maxScore++;
        if (manifest.containsKey(field)) {
          print('  ‚úÖ $field found');
          score++;
        } else {
          print('  ‚ùå Missing $field');
        }
      }

      // Check icons
      if (manifest['icons'] is List) {
        final icons = manifest['icons'] as List;
        maxScore++;

        final has192 =
            icons.any((icon) => icon['sizes']?.contains('192x192') ?? false);
        final has512 =
            icons.any((icon) => icon['sizes']?.contains('512x512') ?? false);

        if (has192 && has512) {
          print('  ‚úÖ Required icon sizes found (192x192, 512x512)');
          score++;
        } else {
          print('  ‚ùå Missing required icon sizes');
        }

        // Check maskable icons
        maxScore++;
        final hasMaskable =
            icons.any((icon) => icon['purpose']?.contains('maskable') ?? false);

        if (hasMaskable) {
          print('  ‚úÖ Maskable icons found');
          score++;
        } else {
          print('  ‚ö†Ô∏è  No maskable icons (optional but recommended)');
        }
      }

      // Check advanced features
      if (manifest.containsKey('shortcuts')) {
        print('  ‚ú® Shortcuts configured');
      }
      if (manifest.containsKey('share_target')) {
        print('  ‚ú® Share target configured');
      }
      if (manifest.containsKey('screenshots')) {
        print('  ‚ú® Screenshots configured');
      }
    } catch (e) {
      print('  ‚ùå Invalid manifest.json: $e');
    }
  } else {
    print('  ‚ùå manifest.json not found');
  }

  print('\nüé® Checking icons...');
  final iconSizes = ['192', '512'];
  for (final size in iconSizes) {
    maxScore++;
    final iconFile = File('web/icons/Icon-$size.png');
    if (await iconFile.exists()) {
      print('  ‚úÖ Icon-$size.png found');
      score++;
    } else {
      print('  ‚ùå Icon-$size.png not found');
    }
  }

  print('\nüîß Checking PWA files...');

  // Check offline.html
  maxScore++;
  final offlineFile = File('web/offline.html');
  if (await offlineFile.exists()) {
    print('  ‚úÖ offline.html found');
    score++;
  } else {
    print('  ‚ö†Ô∏è  offline.html not found (optional)');
  }

  // Check pwa-config.js
  maxScore++;
  final pwaConfigFile = File('web/pwa-config.js');
  if (await pwaConfigFile.exists()) {
    print('  ‚úÖ pwa-config.js found');
    score++;
  } else {
    print('  ‚ö†Ô∏è  pwa-config.js not found (optional)');
  }

  // Calculate and display score
  print('\n' + '‚ïê' * 50);
  final percentage = ((score / maxScore) * 100).round();

  if (percentage >= 90) {
    print('üéâ EXCELLENT! PWA Score: $score/$maxScore ($percentage%)');
    print('Your app is fully PWA-ready!');
  } else if (percentage >= 70) {
    print('üëç GOOD! PWA Score: $score/$maxScore ($percentage%)');
    print('Your app meets most PWA requirements.');
  } else if (percentage >= 50) {
    print('‚ö†Ô∏è  NEEDS WORK! PWA Score: $score/$maxScore ($percentage%)');
    print('Several PWA requirements are missing.');
  } else {
    print('‚ùå POOR! PWA Score: $score/$maxScore ($percentage%)');
    print('Many PWA requirements are not met.');
  }

  print('\nüìö PWA Best Practices:');
  print('  ‚Ä¢ Use HTTPS in production');
  print('  ‚Ä¢ Implement offline functionality');
  print('  ‚Ä¢ Add app shortcuts for quick actions');
  print('  ‚Ä¢ Configure Web Share API');
  print('  ‚Ä¢ Optimize performance (Lighthouse score > 90)');
  print('  ‚Ä¢ Test on real devices');

  print('\nüöÄ To build for production:');
  print('  flutter build web --release --web-renderer html');
  print('  flutter build web --release --web-renderer canvaskit');

  exit(percentage >= 70 ? 0 : 1);
}
